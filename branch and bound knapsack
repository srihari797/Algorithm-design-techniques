#include <iostream>
#include <vector>
#include<iomanip>
using namespace std;

int knapSack(int W, vector<int> &wt, vector<int> &val, int n) {
    // DP table: (n+1) x (W+1)
    vector<vector<int>> dp(n+1, vector<int>(W+1, 0));

    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= W; w++) {
            if (wt[i-1] <= w) {
                dp[i][w] = max(val[i-1] + dp[i-1][w - wt[i-1]], dp[i-1][w]);
            } else {
                dp[i][w] = dp[i-1][w];
            }
        }
    }
    return dp[n][W];
}

int main() {
    int n, W;
    cin >> n >> W;

    vector<int> wt(n), val(n);
    for (int i = 0; i < n; i++) cin >> wt[i];
    for (int i = 0; i < n; i++) cin >> val[i];
int m=knapSack(W, wt, val, n);
double x=(double)(m);
    cout << fixed<<setprecision(2)<<x<< endl;
    return 0;
}
